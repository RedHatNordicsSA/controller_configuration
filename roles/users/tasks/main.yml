---
- name: Add controller user
  user:
    username:                 "{{ __controller_user_accounts_item.user | default(__controller_user_accounts_item.username) | mandatory }}"
    # the 'true' in the second default leads to no password being set if the default password is empty
    password:                 "{{ __controller_user_accounts_item.password | default(controller_user_default_password | default(omit, true)) }}"
    email:                    "{{ __controller_user_accounts_item.email | default(omit, true) }}"
    first_name:               "{{ __controller_user_accounts_item.firstname | default(__controller_user_accounts_item.first_name | default(omit, true)) }}"
    last_name:                "{{ __controller_user_accounts_item.lastname | default(__controller_user_accounts_item.last_name | default(omit, true)) }}"
    is_superuser:             "{{ __controller_user_accounts_item.is_superuser | default(__controller_user_accounts_item.superuser | default(omit)) }}"
    is_system_auditor:        "{{ __controller_user_accounts_item.is_auditor | default(__controller_user_accounts_item.is_system_auditor | default(omit)) }}"
    update_secrets:           "{{ __controller_user_accounts_item.update_secrets | default(omit) }}"
    organization:             "{{ __controller_user_accounts_item.organization | default(omit) }}"
    state:                    "{{ __controller_user_accounts_item.state | default(controller_state | default(omit, true)) }}"

    # Role Standard Options
    controller_host:          "{{ controller_hostname | default(omit, true) }}"
    controller_username:      "{{ controller_username | default(omit, true) }}"
    controller_password:      "{{ controller_password | default(omit, true) }}"
    controller_oauthtoken:    "{{ controller_oauthtoken | default(omit, true) }}"
    validate_certs:           "{{ controller_validate_certs | default(omit) }}"
    controller_config_file:   "{{ controller_config_file | default(omit, true) }}"
  loop: "{{ controller_user_accounts }}"
  loop_control:
    loop_var: __controller_user_accounts_item
  no_log: "{{ controller_configuration_users_secure_logging }}"
  async: 1000
  poll: 0
  register: __controller_user_accounts_job_async
  changed_when: not __controller_user_accounts_job_async.changed
  vars:
    ansible_async_dir: '/tmp/.ansible_async'

- name: "Configure Users | Wait for finish the Users creation"
  async_status:
    jid: "{{ __controller_user_accounts_job_async_results_item.ansible_job_id }}"
  register: __controller_user_accounts_job_async_result
  until: __controller_user_accounts_job_async_result.finished
  retries: "{{ controller_configuration_users_async_retries }}"
  delay: "{{ controller_configuration_users_async_delay }}"
  loop: "{{ __controller_user_accounts_job_async.results }}"
  loop_control:
    loop_var: __controller_user_accounts_job_async_results_item
  when: __controller_user_accounts_job_async_results_item.ansible_job_id is defined
  no_log: "{{ controller_configuration_users_secure_logging }}"
  vars:
    ansible_async_dir: '/tmp/.ansible_async'
...
