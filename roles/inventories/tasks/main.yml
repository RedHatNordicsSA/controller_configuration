---
- name: Create inventory
  inventory:
    name:                       "{{ __controller_inventory_item.name | mandatory }}"
    copy_from:                  "{{ __controller_inventory_item.copy_from | default(omit, true) }}"
    description:                "{{ __controller_inventory_item.description | default(omit, true) }}"
    organization:               "{{ __controller_inventory_item.organization.name | default( __controller_inventory_item.organization ) | mandatory }}"
    instance_groups:            "{{ __controller_inventory_item.instance_groups | default(omit, true) }}"
    variables:                  "{{ __controller_inventory_item.variables | default(omit, true) | regex_replace('[ ]{2,}','') }}"
    kind:                       "{{ __controller_inventory_item.kind | default(omit, true) }}"
    host_filter:                "{{ __controller_inventory_item.host_filter | default(omit, true) }}"
    state:                      "{{ __controller_inventory_item.state | default(controller_state | default('present')) }}"

    # Role Standard Options
    controller_config_file:     "{{ controller_config_file | default(omit, true) }}"
    controller_host:            "{{ controller_hostname | default(omit, true) }}"
    controller_username:        "{{ controller_username | default(omit, true) }}"
    controller_password:        "{{ controller_password | default(omit, true) }}"
    controller_oauthtoken:      "{{ controller_oauthtoken | default(omit, true) }}"
    validate_certs:             "{{ controller_validate_certs | default(omit) }}"
  loop: "{{ controller_inventories }}"
  loop_control:
    loop_var: __controller_inventory_item
  no_log: "{{ controller_configuration_inventories_secure_logging }}"
  async: 1000
  poll: 0
  register: __inventories_job_async
  changed_when: not __inventories_job_async.changed
  vars:
    ansible_async_dir: '/tmp/.ansible_async'

- name: "Create Controller inventories | Wait for finish the inventories creation"
  async_status:
    jid: "{{ __inventories_job_async_result_item.ansible_job_id }}"
  register: __inventories_job_async_result
  until: __inventories_job_async_result.finished
  retries: "{{ controller_configuration_inventories_async_retries }}"
  delay: "{{ controller_configuration_inventories_async_delay }}"
  loop: "{{ __inventories_job_async.results }}"
  loop_control:
    loop_var: __inventories_job_async_result_item
  when: __inventories_job_async_result_item.ansible_job_id is defined
  no_log: "{{ controller_configuration_inventories_secure_logging }}"
  vars:
    ansible_async_dir: '/tmp/.ansible_async'
...
